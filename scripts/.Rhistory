# author: dlueckin
# date: Thu Jan 26 13:04:55 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggpubr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import data -------------------------------------------------------------
data <- fread("intermediate/collected_data_with_transposons.tsv")
setwd("/run/user/1000/gvfs/sftp:host=linux-desktop-1.mpi-bremen.de,user=dlueckin/home/dlueckin/projects/misc/mvome_cog_analysis")
# load def again
def <- fread("helper_files/cog-20.def.tab")
# transposases get a new letter
def$V2[def$V2 == "X"] <- "X_non_trans"
def$V2[str_detect(def$V3, pattern = "transposase")] <- "X_trans"
def$V2[str_detect(def$V3, pattern = "Transposase")] <- "X_trans"
# adding new letter
blast_df$letter <- def$V2[match(blast_df$COG, def$V1)]
# author: dlueckin
# date: Thu Jan 26 12:10:39 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
# prepare template df -----------------------------------------------------
COG_template_df <- fread("helper_files/template_classifier_count.tsv")
# repeat the DF, since we need to check for the origin (later facet wrap) -
repeat_df <- function(d, n) {
return(do.call("rbind", replicate(n, d, simplify = FALSE)))
}
labels = c("ev", "gta", "viral", "microbial")
COG_template_df <- repeat_df(COG_template_df, length(labels))
COG_template_df$label <- rep(labels, each = nrow(COG_template_df) / length(labels))
# import microbial blast out and combine ------------------------------------
blast_df <- data.table()
files <- list.files("intermediate/blast_out/microbial/")
for(file in files){
file_long = paste0("intermediate/blast_out/microbial/", file)
if(file.info(file_long)$size  > 0){
tmp_df <- fread(file_long, select = c("V2"))
tmp_df$origin <- paste0(file, "_microbial")
blast_df <- rbind(blast_df, tmp_df)
}
}
rm(tmp_df)
# import ev_gta_and_viral blastout and combine ----------------------------
files <- list.files("intermediate/blast_out/peDNA/")
for(file in files){
file_long = paste0("intermediate/blast_out/peDNA/", file)
if(file.info(file_long)$size  > 0){
tmp_df <- fread(file_long, select = c("V2"))
tmp_df$origin <- file
blast_df <- rbind(blast_df, tmp_df)
}
}
rm(tmp_df)
# additionally, check for transposases specifically -----------------------
# run code above to line 53 if not done yet
# load def again
def <- fread("helper_files/cog-20.def.tab")
# transposases get a new letter
def$V2[def$V2 == "X"] <- "X_non_trans"
def$V2[str_detect(def$V3, pattern = "transposase")] <- "X_trans"
def$V2[str_detect(def$V3, pattern = "Transposase")] <- "X_trans"
# adding new letter
blast_df$letter <- def$V2[match(blast_df$COG, def$V1)]
# do the other stuff again
df <- blast_df %>%
select(origin, letter) %>%
group_by(origin, letter) %>%
tally()
# create fake COG template df with X_trans and X_non_trans
COG_template_df <- fread("helper_files/template_classifier_count.tsv") %>%
filter(LETTER != "X")
COG_template_df <- rbind(COG_template_df, data.table(LETTER = "X_trans", COUNT = 0, COLOR = "#9CFC9C", DESCRIPTION = "Mobilome: transposons only"))
COG_template_df <- rbind(COG_template_df, data.table(LETTER = "X_non_trans", COUNT = 0, COLOR = "#9CFC9C", DESCRIPTION = "Mobilome: without transposons"))
# repeat the DF, since we need to check for the origin (later facet wrap) -
repeat_df <- function(d, n) {
return(do.call("rbind", replicate(n, d, simplify = FALSE)))
}
labels = c("ev", "gta", "viral", "microbial")
COG_template_df <- repeat_df(COG_template_df, length(labels))
COG_template_df$label <- rep(labels, each = nrow(COG_template_df) / length(labels))
for(i in 1:nrow(COG_template_df)){
COG_template_df$COUNT[i] <- df %>%
filter(str_detect(string = origin, pattern = COG_template_df$label[i])) %>%     # matches origin
filter(str_detect(string = letter, pattern = COG_template_df$LETTER[i])) %>%    # matches label
ungroup() %>%                                                                   # ungroup, otherwise the origin appears in the select
select(n) %>%
summarise(total = sum(n)) %>%
pull()
}
COG_template_df$rel[COG_template_df$label == "ev"] <-
COG_template_df$COUNT[COG_template_df$label == "ev"] / sum(COG_template_df$COUNT[COG_template_df$label == "ev"])
COG_template_df$rel[COG_template_df$label == "viral"] <-
COG_template_df$COUNT[COG_template_df$label == "viral"] / sum(COG_template_df$COUNT[COG_template_df$label == "viral"])
COG_template_df$rel[COG_template_df$label == "gta"] <-
COG_template_df$COUNT[COG_template_df$label == "gta"] / sum(COG_template_df$COUNT[COG_template_df$label == "gta"])
COG_template_df$rel[COG_template_df$label == "microbial"] <-
COG_template_df$COUNT[COG_template_df$label == "microbial"] / sum(COG_template_df$COUNT[COG_template_df$label == "microbial"])
fwrite(COG_template_df, "intermediate/collected_data_with_transposons.tsv")
# author: dlueckin
# date: Thu Jan 26 13:04:55 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggpubr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import data -------------------------------------------------------------
data <- fread("intermediate/collected_data_with_transposons.tsv")
# author: dlueckin
# date: Thu Jan 26 13:04:55 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggpubr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import data -------------------------------------------------------------
data <- fread("../intermediate/collected_data_with_transposons.tsv")
data$perc <- data$rel * 100
# author: dlueckin
# date: Thu Jan 26 13:04:55 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggpubr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import data -------------------------------------------------------------
data <- fread("../intermediate/collected_data_with_transposons.tsv")
data$perc <- data$rel * 100
View(data)
# author: dlueckin
# date: Thu Jan 26 12:10:39 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
# prepare template df -----------------------------------------------------
COG_template_df <- fread("helper_files/template_classifier_count.tsv")
setwd("/run/user/1000/gvfs/sftp:host=linux-desktop-1.mpi-bremen.de,user=dlueckin/home/dlueckin/projects/misc/mvome_cog_analysis")
# author: dlueckin
# date: Thu Jan 26 12:10:39 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
# prepare template df -----------------------------------------------------
COG_template_df <- fread("helper_files/template_classifier_count.tsv")
# repeat the DF, since we need to check for the origin (later facet wrap) -
repeat_df <- function(d, n) {
return(do.call("rbind", replicate(n, d, simplify = FALSE)))
}
labels = c("ev", "gta", "viral", "microbial")
COG_template_df <- repeat_df(COG_template_df, length(labels))
COG_template_df$label <- rep(labels, each = nrow(COG_template_df) / length(labels))
# import microbial blast out and combine ------------------------------------
blast_df <- data.table()
files <- list.files("intermediate/blast_out/microbial/")
for(file in files){
file_long = paste0("intermediate/blast_out/microbial/", file)
if(file.info(file_long)$size  > 0){
tmp_df <- fread(file_long, select = c("V2"))
tmp_df$origin <- paste0(file, "_microbial")
blast_df <- rbind(blast_df, tmp_df)
}
}
rm(tmp_df)
# import ev_gta_and_viral blastout and combine ----------------------------
files <- list.files("intermediate/blast_out/peDNA/")
for(file in files){
file_long = paste0("intermediate/blast_out/peDNA/", file)
if(file.info(file_long)$size  > 0){
tmp_df <- fread(file_long, select = c("V2"))
tmp_df$origin <- file
blast_df <- rbind(blast_df, tmp_df)
}
}
rm(tmp_df)
# additionally, check for transposases specifically -----------------------
# run code above to line 53 if not done yet
# load def again
def <- fread("helper_files/cog-20.def.tab")
# transposases get a new letter
def$V2[def$V2 == "X"] <- "X_non_trans"
def$V2[str_detect(def$V3, pattern = "transposase")] <- "X_trans"
def$V2[str_detect(def$V3, pattern = "Transposase")] <- "X_trans"
# adding new letter
blast_df$letter <- def$V2[match(blast_df$COG, def$V1)]
# do the other stuff again
df <- blast_df %>%
select(origin, letter) %>%
group_by(origin, letter) %>%
tally()
View(df)
View(def)
View(def)
View(blast_df)
View(def)
def <- fread("helper_files/cog-20.def.tab")
# transposases get a new letter
def$V2[def$V2 == "X"] <- "X_non_trans"
def$V2[str_detect(def$V3, pattern = "transposase")] <- "X_trans"
def$V2[str_detect(def$V3, pattern = "Transposase")] <- "X_trans"
# adding new letter
blast_df$letter <- def$V2[match(blast_df$COG, def$V1)]
blast_df$letter <-
"# adding new letter
blast_df$letter <- def$V2[match(blast_df$COG, def$V1)]
# do the other stuff again
df <- blast_df %>%
select(origin, letter) %>%
group_by(origin, letter) %>%
tally()
# create fake COG template df with X_trans and X_non_trans
COG_template_df <- fread("helper_files/template_classifier_count.tsv") %>%
blast_df$letter <-
""    # adding new letter
# adding new letter
blast_df$letter <- def$V2[match(blast_df$COG, def$V1)]
blast_df$letter
blast_df$COG
View(blast_df)
# adding new letter
blast_df$letter <- def$V2[match(blast_df$V2, def$V2)]
View(blast_df)
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
COG_template_df <- fread("helper_files/template_classifier_count.tsv")
# repeat the DF, since we need to check for the origin (later facet wrap) -
repeat_df <- function(d, n) {
return(do.call("rbind", replicate(n, d, simplify = FALSE)))
}
labels = c("ev", "gta", "viral", "microbial")
COG_template_df <- repeat_df(COG_template_df, length(labels))
COG_template_df$label <- rep(labels, each = nrow(COG_template_df) / length(labels))
blast_df <- data.table()
files <- list.files("intermediate/blast_out/microbial/")
for(file in files){
file_long = paste0("intermediate/blast_out/microbial/", file)
if(file.info(file_long)$size  > 0){
tmp_df <- fread(file_long, select = c("V2"))
tmp_df$origin <- paste0(file, "_microbial")
blast_df <- rbind(blast_df, tmp_df)
}
}
rm(tmp_df)
files <- list.files("intermediate/blast_out/peDNA/")
for(file in files){
file_long = paste0("intermediate/blast_out/peDNA/", file)
if(file.info(file_long)$size  > 0){
tmp_df <- fread(file_long, select = c("V2"))
tmp_df$origin <- file
blast_df <- rbind(blast_df, tmp_df)
}
}
rm(tmp_df, file, files)
View(blast_df)
def <- fread("helper_files/cog-20.def.tab")
# cog needs to be treated with sed -i 's/,,,,,/,,,,/' cog-20.cog.csv
cog <- fread("helper_files/cog-20.cog.csv", fill = T, sep = ",")
g
blast_df$COG <- cog$V7[match(blast_df$V2, cog$V3)]
View(blast_df)
# additionally, check for transposases specifically -----------------------
# run code above to line 62 if not done yet
# load def again
def <- fread("helper_files/cog-20.def.tab")
# transposases get a new letter
def$V2[def$V2 == "X"] <- "X_non_trans"
def$V2[str_detect(def$V3, pattern = "transposase")] <- "X_trans"
def$V2[str_detect(def$V3, pattern = "Transposase")] <- "X_trans"
View(blast_df)
View(def)
# adding new letter
blast_df$letter <- def$V2[match(blast_df$COG, def$V1)]
# do the other stuff again
df <- blast_df %>%
select(origin, letter) %>%
group_by(origin, letter) %>%
tally()
View(df)
# create fake COG template df with X_trans and X_non_trans
COG_template_df <- fread("helper_files/template_classifier_count.tsv") %>%
filter(LETTER != "X")
COG_template_df <- rbind(COG_template_df, data.table(LETTER = "X_trans", COUNT = 0, COLOR = "#9CFC9C", DESCRIPTION = "Mobilome: transposons only"))
COG_template_df <- rbind(COG_template_df, data.table(LETTER = "X_non_trans", COUNT = 0, COLOR = "#9CFC9C", DESCRIPTION = "Mobilome: without transposons"))
View(COG_template_df)
# repeat the DF, since we need to check for the origin (later facet wrap) -
repeat_df <- function(d, n) {
return(do.call("rbind", replicate(n, d, simplify = FALSE)))
}
labels = c("ev", "gta", "viral", "microbial")
COG_template_df <- repeat_df(COG_template_df, length(labels))
COG_template_df$label <- rep(labels, each = nrow(COG_template_df) / length(labels))
for(i in 1:nrow(COG_template_df)){
COG_template_df$COUNT[i] <- df %>%
filter(str_detect(string = origin, pattern = COG_template_df$label[i])) %>%     # matches origin
filter(str_detect(string = letter, pattern = COG_template_df$LETTER[i])) %>%    # matches label
ungroup() %>%                                                                   # ungroup, otherwise the origin appears in the select
select(n) %>%
summarise(total = sum(n)) %>%
pull()
}
View(COG_template_df)
COG_template_df$rel[COG_template_df$label == "ev"] <-
COG_template_df$COUNT[COG_template_df$label == "ev"] / sum(COG_template_df$COUNT[COG_template_df$label == "ev"])
COG_template_df$rel[COG_template_df$label == "viral"] <-
COG_template_df$COUNT[COG_template_df$label == "viral"] / sum(COG_template_df$COUNT[COG_template_df$label == "viral"])
COG_template_df$rel[COG_template_df$label == "gta"] <-
COG_template_df$COUNT[COG_template_df$label == "gta"] / sum(COG_template_df$COUNT[COG_template_df$label == "gta"])
COG_template_df$rel[COG_template_df$label == "microbial"] <-
COG_template_df$COUNT[COG_template_df$label == "microbial"] / sum(COG_template_df$COUNT[COG_template_df$label == "microbial"])
fwrite(COG_template_df, "intermediate/collected_data_with_transposons.tsv")
# author: dlueckin
# date: Thu Jan 26 13:04:55 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggpubr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
data <- fread("../intermediate/collected_data_with_transposons.tsv")
data$perc <- data$rel * 100
View(data)
data %>%
filter(str_detect(LETTER, "X"))
data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label)
data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
summarise(transposon_perc = perc/sum(perc))
data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
mutate(transposon_perc = perc/sum(perc))
data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
mutate(transposon_perc = perc/sum(perc) * 100)
data <- data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
mutate(transposon_perc = perc/sum(perc) * 100)
data <- data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
mutate(transposon_perc = perc/sum(perc) * 100) %>%
filter(label != microbial)
data <- data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
mutate(transposon_perc = perc/sum(perc) * 100) %>%
filter(label != "microbial")
data
# author: dlueckin
# date: Thu Jan 26 13:04:55 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggpubr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import data -------------------------------------------------------------
data <- fread("../intermediate/collected_data_with_transposons.tsv")
data$perc <- data$rel * 100
# little stats stuff ------------------------------------------------------
data <- data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
mutate(transposon_perc = perc/sum(perc) * 100)
View(data)
# author: dlueckin
# date: Thu Jan 26 13:04:55 2023
# libraries ---------------------------------------------------------------
library(data.table)
library(stringr)
library(ggplot2)
library(dplyr)
library(ggpubr)
# working directory -------------------------------------------------------
this_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(this_dir)
print(paste0("Setting wd to: \n ", this_dir))
# import data -------------------------------------------------------------
data <- fread("../intermediate/collected_data_with_transposons.tsv")
data$perc <- data$rel * 100
# little stats stuff ------------------------------------------------------
data <- data %>%
filter(str_detect(LETTER, "X")) %>%
group_by(label) %>%
mutate(transposon_perc = perc/sum(perc) * 100)
data
mean(1,2)
mean(1,2,4)
mean(c(84, 73.4, 88.7))
